openapi: 3.0.0
info:
  title: Introspection Web API
  version: 1.0.0
  description: |-
    自己分析と目標進捗管理のためのWeb API仕様。
    フロントエンド開発を先行し、この仕様に基づいてバックエンドを開発する想定。
    認証方式は HttpOnly Cookie (名前: sid) を想定。
    成功レスポンスボディにはリソースオブジェクトまたは配列を直接含める。

servers:
  - url: http://localhost:5137
    description: Local development server (MSW or Proxy)

tags:
  - name: Goals
    description: 目標進捗関連API
  - name: Introspections
    description: 自己分析・トレンド関連API
  - name: User
    description: ユーザー情報関連API
  - name: Auth
    description: 認証関連API

paths:
  # --- Goals ---
  /api/goals/progress:
    get:
      summary: 目標進捗リストを取得
      operationId: getGoalProgressList
      tags: [Goals]
      security:
        - cookieAuth: []
      responses:
        '200':
          description: 目標進捗リストの取得成功
          content:
            application/json:
              schema: # ★ 配列を直接返す
                type: array
                items:
                  $ref: '#/components/schemas/GoalProgress'
              example:
                - id: 'goal-1'
                  label: 朝の運動
                  value: 70
                  maxValue: 100
                  color: '#4CAF50'
                - id: 'goal-2'
                  label: 読書習慣
                  value: 50
                  maxValue: 100
                  color: '#5C73E6'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: 目標進捗リストを一括更新
      operationId: updateGoalProgressList
      tags: [Goals]
      security:
        - cookieAuth: []
      requestBody:
        description: 更新する目標進捗のリスト (IDで対象を指定)
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/GoalProgressUpdateInput'
            example:
              - id: 'goal-1'
                value: 80
              - id: 'goal-2'
                value: 60
      responses:
        '200':
          description: 目標進捗リストの更新成功 (更新後のリストを返す)
          content:
            application/json:
              schema: # ★ 配列を直接返す
                type: array
                items:
                  $ref: '#/components/schemas/GoalProgress'
              example:
                - id: 'goal-1'
                  label: 朝の運動
                  value: 80
                  maxValue: 100
                  color: '#4CAF50'
                - id: 'goal-2'
                  label: 読書習慣
                  value: 60
                  maxValue: 100
                  color: '#5C73E6'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/goals/progress/{goalId}:
    parameters:
      - name: goalId
        in: path
        required: true
        schema: { type: string, format: uuid }
        example: 'goal-1'
    put:
      summary: 特定の目標進捗を更新
      operationId: updateSingleGoalProgress
      tags: [Goals]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingleGoalValueUpdateInput'
            example: { value: 90 }
      responses:
        '200':
          description: 特定目標の更新成功 (更新後の目標データを返す)
          content:
            application/json:
              schema: # ★ オブジェクトを直接返す
                $ref: '#/components/schemas/GoalProgress'
              example:
                id: 'goal-1'
                label: 朝の運動
                value: 90
                maxValue: 100
                color: '#4CAF50'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # --- Introspections & Trends ---
  /api/introspections:
    get:
      summary: 自己分析リストを取得
      operationId: getIntrospectionList
      tags: [Introspections]
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          schema: { type: integer, minimum: 1, default: 1 }
        - name: limit
          in: query
          schema: { type: integer, minimum: 1, maximum: 100, default: 10 }
      responses:
        '200':
          description: 自己分析リストの取得成功
          content:
            application/json:
              schema: # ★ 配列を直接返す
                type: array
                items:
                  $ref: '#/components/schemas/IntrospectionData'
              example:
                - id: 'd290f1ee...' # ... (IntrospectionData)
                - id: '550e8400...' # ... (IntrospectionData)
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: 新しい自己分析を追加
      operationId: addIntrospection
      tags: [Introspections]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntrospectionCreateInput'
            example: { date: '2025-04-09', title: '...', ... }
      responses:
        '201':
          description: 自己分析の追加成功 (作成されたデータを返す)
          content:
            application/json:
              schema: # ★ オブジェクトを直接返す
                $ref: '#/components/schemas/IntrospectionData'
              example:
                id: 'new-generated-uuid'
                date: '2025-04-09'
                title: '今日の振り返り'
                # ... (省略)
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/introspections/{introspectionId}:
    parameters:
      - name: introspectionId
        in: path
        required: true
        schema: { type: string, format: uuid }
        example: 'd290f1ee-6c54-4b01-90e6-d701748f0851'
    get:
      summary: 特定の自己分析を取得
      operationId: getIntrospectionById
      tags: [Introspections]
      security:
        - cookieAuth: []
      responses:
        '200':
          description: 特定の自己分析データの取得成功
          content:
            application/json:
              schema: # ★ オブジェクトを直接返す
                $ref: '#/components/schemas/IntrospectionData'
              example:
                id: 'd290f1ee...' # ... (IntrospectionData)
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: 特定の自己分析を更新
      operationId: updateIntrospection
      tags: [Introspections]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntrospectionUpdateInput'
            example: { date: '2025-03-22', title: '...', ... }
      responses:
        '200':
          description: 自己分析の更新成功 (更新後のデータを返す)
          content:
            application/json:
              schema: # ★ オブジェクトを直接返す
                $ref: '#/components/schemas/IntrospectionData'
              example:
                id: 'd290f1ee...' # ... (IntrospectionData)
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: 特定の自己分析を削除
      operationId: deleteIntrospection
      tags: [Introspections]
      security:
        - cookieAuth: []
      responses:
        '204': # ★ No Content (ボディなし)
          description: 自己分析の削除成功
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/trends:
    get:
      summary: トレンドデータを取得
      operationId: getTrendData
      tags: [Introspections]
      security:
        - cookieAuth: []
      parameters:
        - name: from
          in: query
          schema: { type: string, format: date }
        - name: to
          in: query
          schema: { type: string, format: date }
      responses:
        '200':
          description: トレンドデータの取得成功
          content:
            application/json:
              schema: # ★ 配列を直接返す
                type: array
                items:
                  $ref: '#/components/schemas/TrendData'
              example:
                - date: '2025-03-15' # ... (TrendData)
                - date: '2025-03-22' # ... (TrendData)
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/status/current:
    get:
      summary: 現在のステータスを取得
      operationId: getCurrentStatus
      tags: [Introspections]
      security:
        - cookieAuth: []
      responses:
        '200':
          description: 現在のステータスの取得成功
          content:
            application/json:
              schema: # ★ オブジェクトを直接返す
                $ref: '#/components/schemas/CurrentStatus'
              example:
                physical: 4
                mental: 5
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # --- User & Auth ---
  /api/user:
    get:
      summary: 現在の認証済みユーザー情報を取得
      operationId: getCurrentUser
      tags: [User]
      security:
        - cookieAuth: []
      responses:
        '200':
          description: ユーザー情報の取得成功
          content:
            application/json:
              schema: # ★ オブジェクトを直接返す
                $ref: '#/components/schemas/UserData'
              example:
                id: 'mock-user-id'
                name: 'Demo User'
                email: 'demo@example.com'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/login:
    post:
      summary: メールアドレスとパスワードでログイン (Cookieを設定)
      operationId: login
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
            example: { email: 'demo@example.com', password: 'password123' }
      responses:
        '200':
          description: ログイン成功 (サーバーがSet-CookieヘッダーでセッションCookieを設定)
          content:
            application/json:
              schema: # ★ オブジェクト (UserData) を直接返す
                $ref: '#/components/schemas/UserData'
              example:
                id: 'mock-user-id'
                name: 'Demo User'
                email: 'demo@example.com'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/logout:
    post:
      summary: ログアウト (サーバー側でCookieを無効化)
      operationId: logout
      tags: [Auth]
      responses:
        '204': # ★ No Content (ボディなし)
          description: ログアウト成功 (サーバーがSet-CookieヘッダーでCookieをクリア)
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/auth/status:
    get:
      summary: 現在の認証状態（Cookie）を確認
      operationId: checkAuthStatus
      tags: [Auth]
      security:
        - cookieAuth: []
      responses:
        '200':
          description: 認証済み（有効なセッションあり）, ユーザー情報を返す
          content:
            application/json:
              schema: # ★ オブジェクトを直接返す
                $ref: '#/components/schemas/UserData'
              example:
                id: 'mock-user-id' # ... (UserData)
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    # --- Base Response Schemas (Error Only) ---
    ErrorResponse:
      type: object
      properties:
        status:
          { type: integer, format: int32, description: HTTPステータスコード }
        message: { type: string, description: エラーメッセージ }
        code:
          {
            type: string,
            description: (オプション) アプリケーション固有のエラーコード
          }
        details:
          {
            type: object,
            additionalProperties: true,
            description: (オプション) エラーの詳細情報
          }
      required: [status, message]
    # SuccessResponseBase, SuccessDataArrayResponseBase, etc. は削除

    # --- Data Models ---
    StatusRating: { type: integer, format: int32, enum: [1, 2, 3, 4, 5] }
    Status:
      type: object
      properties:
        physical: { $ref: '#/components/schemas/StatusRating' }
        mental: { $ref: '#/components/schemas/StatusRating' }
      required: [physical, mental]
    IntrospectionData:
      type: object
      properties:
        id: { type: string, format: uuid, readOnly: true }
        date: { type: string, format: date }
        title: { type: string, minLength: 1 }
        activities: { type: string }
        improvements: { type: string }
        nextSteps: { type: string }
        status: { $ref: '#/components/schemas/Status' }
      required: [id, date, title, activities, improvements, nextSteps, status]
    TrendData:
      type: object
      properties:
        date: { type: string, format: date }
        mental: { type: number, format: float }
        physical: { type: number, format: float }
      required: [date, mental, physical]
    CurrentStatus:
      type: object
      properties:
        physical: { type: number, format: int32 }
        mental: { type: number, format: int32 }
      required: [physical, mental]
    GoalProgress:
      type: object
      properties:
        id: { type: string, format: uuid, readOnly: true }
        label: { type: string }
        value: { type: number, format: int32 }
        maxValue: { type: number, format: int32 }
        color: { type: string }
      required: [id, label, value, maxValue, color]
    UserData:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        email: { type: string, format: email }
      required: [id, name, email]

    # --- Input Schemas ---
    IntrospectionCreateInput:
      type: object
      properties:
        {
          date: { type: string, format: date },
          title: { type: string, minLength: 1 },
          activities: { type: string },
          improvements: { type: string },
          nextSteps: { type: string },
          status: { $ref: '#/components/schemas/Status' }
        }
      required: [date, title, activities, improvements, nextSteps, status]
    IntrospectionUpdateInput:
      type: object
      properties:
        {
          date: { type: string, format: date },
          title: { type: string, minLength: 1 },
          activities: { type: string },
          improvements: { type: string },
          nextSteps: { type: string },
          status: { $ref: '#/components/schemas/Status' }
        }
      required: [date, title, activities, improvements, nextSteps, status]
    GoalProgressUpdateInput:
      type: object
      properties:
        { id: { type: string }, value: { type: number, format: int32 } }
      required: [id, value]
    SingleGoalValueUpdateInput:
      type: object
      properties: { value: { type: number, format: int32 } }
      required: [value]
    LoginCredentials:
      type: object
      properties:
        {
          email: { type: string, format: email },
          password: { type: string, format: password, minLength: 8 }
        }
      required: [email, password]

    # --- Response Wrapper Schemas は不要になったので削除 ---

  responses: # Common Error Responses
    BadRequest:
      description: リクエスト不正
      content:
        {
          application/json:
            {
              schema: { $ref: '#/components/schemas/ErrorResponse' },
              example: { status: 400, message: 'Invalid input' }
            }
        }
    Unauthorized:
      description: 認証エラー
      content:
        {
          application/json:
            {
              schema: { $ref: '#/components/schemas/ErrorResponse' },
              example: { status: 401, message: 'Authentication required' }
            }
        }
    NotFound:
      description: リソースが見つからない
      content:
        {
          application/json:
            {
              schema: { $ref: '#/components/schemas/ErrorResponse' },
              example: { status: 404, message: 'Resource not found' }
            }
        }
    InternalServerError:
      description: サーバー内部エラー
      content:
        {
          application/json:
            {
              schema: { $ref: '#/components/schemas/ErrorResponse' },
              example: { status: 500, message: 'Internal server error' }
            }
        }

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sid # Cookie名 (バックエンドと要整合)
      description: HttpOnly, Secure, SameSite属性付きのセッションCookie
